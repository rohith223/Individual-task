{"ast":null,"code":"function Validation(values) {\n  let error = {\n    Name: '',\n    email: '',\n    password: ''\n  };\n  const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/;\n  if (values.Name === '') {\n    error.Name = 'Name Should not be empty';\n  } else {\n    error.Name = '';\n  }\n  if (values.email === '') {\n    error.email = 'Email Should not be empty';\n  } else if (!email_pattern.test(values.email)) {\n    error.email = 'Email format is incorrect';\n  } else {\n    error.email = '';\n  }\n  if (values.password === '') {\n    error.password = 'Password Should not be empty';\n  } else if (!password_pattern.test(values.password)) {\n    error.password = 'Password must contain at least one digit, one lowercase letter, one uppercase letter, and be at least 8 characters long';\n  } else {\n    error.password = '';\n  }\n  return error;\n}\n_c = Validation;\nexport default Validation;\nvar _c;\n$RefreshReg$(_c, \"Validation\");","map":{"version":3,"names":["Validation","values","error","Name","email","password","email_pattern","password_pattern","test","_c","$RefreshReg$"],"sources":["C:/Users/RohithRajaC/OneDrive - JMAN Group Ltd/Desktop/Demo/my-app/src/SignupValidation.tsx"],"sourcesContent":["interface ErrorObject {\r\n    Name : string;\r\n    email: string;\r\n    password: string;\r\n  }\r\n  \r\n  function Validation(values: { Name:string;email: string; password: string }): ErrorObject {\r\n    let error: ErrorObject = {\r\n      Name:'',\r\n      email: '',\r\n      password: '',\r\n    };\r\n  \r\n    const email_pattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const password_pattern = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,}$/;\r\n  \r\n    if (values.Name === '') {\r\n        error.Name= 'Name Should not be empty';\r\n      } else {\r\n        error.Name = '';\r\n      }\r\n    \r\n    if (values.email === '') {\r\n      error.email = 'Email Should not be empty';\r\n    } else if (!email_pattern.test(values.email)) {\r\n      error.email = 'Email format is incorrect';\r\n    } else {\r\n        error.email = '';\r\n    }\r\n  \r\n    if (values.password === '') {\r\n      error.password = 'Password Should not be empty';\r\n    } else if (!password_pattern.test(values.password)) {\r\n      error.password =\r\n        'Password must contain at least one digit, one lowercase letter, one uppercase letter, and be at least 8 characters long';\r\n    } else {\r\n        error.password = '';\r\n    }\r\n  \r\n    return error;\r\n  }\r\n  \r\n  export default Validation;\r\n  "],"mappings":"AAME,SAASA,UAAUA,CAACC,MAAuD,EAAe;EACxF,IAAIC,KAAkB,GAAG;IACvBC,IAAI,EAAC,EAAE;IACPC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACZ,CAAC;EAED,MAAMC,aAAa,GAAG,4BAA4B;EAClD,MAAMC,gBAAgB,GAAG,iDAAiD;EAE1E,IAAIN,MAAM,CAACE,IAAI,KAAK,EAAE,EAAE;IACpBD,KAAK,CAACC,IAAI,GAAE,0BAA0B;EACxC,CAAC,MAAM;IACLD,KAAK,CAACC,IAAI,GAAG,EAAE;EACjB;EAEF,IAAIF,MAAM,CAACG,KAAK,KAAK,EAAE,EAAE;IACvBF,KAAK,CAACE,KAAK,GAAG,2BAA2B;EAC3C,CAAC,MAAM,IAAI,CAACE,aAAa,CAACE,IAAI,CAACP,MAAM,CAACG,KAAK,CAAC,EAAE;IAC5CF,KAAK,CAACE,KAAK,GAAG,2BAA2B;EAC3C,CAAC,MAAM;IACHF,KAAK,CAACE,KAAK,GAAG,EAAE;EACpB;EAEA,IAAIH,MAAM,CAACI,QAAQ,KAAK,EAAE,EAAE;IAC1BH,KAAK,CAACG,QAAQ,GAAG,8BAA8B;EACjD,CAAC,MAAM,IAAI,CAACE,gBAAgB,CAACC,IAAI,CAACP,MAAM,CAACI,QAAQ,CAAC,EAAE;IAClDH,KAAK,CAACG,QAAQ,GACZ,yHAAyH;EAC7H,CAAC,MAAM;IACHH,KAAK,CAACG,QAAQ,GAAG,EAAE;EACvB;EAEA,OAAOH,KAAK;AACd;AAACO,EAAA,GAlCQT,UAAU;AAoCnB,eAAeA,UAAU;AAAC,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}